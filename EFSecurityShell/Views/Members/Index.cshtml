@model TeamComeback_V2.ViewModels.MemberIndexViewModel
@using PagedList.Mvc
@{
    ViewBag.Title = "Index";
}

<h2>Our Members</h2>
<p>
    <a href="/TeamComeback_V2/Members/Create/" class="btn btn-primary" role="button" aria-disabled="true"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add Member</a>
</p>
<p>
    @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing all" : "You search for " + Model.Search + " found")  @Model.Members.TotalItemCount members
</p>



@using (Html.BeginForm("Index", "Members", FormMethod.Get))
{
    @Html.TextBox("Search", null, new { @placeholder = "Search Member" }) <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
    <div class="right">
        <span class="glyphicon glyphicon-filter" aria-hidden="true"></span> @Html.DropDownList("Gender", "All")
        <input type="submit" value="Filter" />
    </div>
    <input type="hidden" name="Search" id="Search" value="@Model.Search" />
}
<br />
<table class="table table-striped">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().Gender)
        </th>
        @if(Request.IsAuthenticated && User.IsInRole("Admin") || User.IsInRole("Employee"))
        {
        <th>
            @Html.DisplayNameFor(model => model.Members.First().DoB)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().Address)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().Zip)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().PhoneNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Members.First().DateOfLastStroke)
        </th>
        }
        <th></th>
    </tr>

    @foreach (var item in Model.Members)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Gender)
        </td>
        @if (Request.IsAuthenticated && User.IsInRole("Admin") || User.IsInRole("Employee"))
        {
        <td>
            @Html.DisplayFor(modelItem => item.DoB)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Address)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.City)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.State)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Zip)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PhoneNumber)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DateOfLastStroke)
        </td>
        }
        <td>
            @Html.ActionLink(" ", "Edit", new { id = item.ID }, new { @class = "btn btn-warning btn-sm fa fa-edit" })
            @Html.ActionLink(" ", "Details", new { id = item.ID }, new { @class = "btn btn-info btn-sm fa fa-list" })
            @Html.ActionLink(" ", "Delete", new { id = item.ID }, new { @class = "btn btn-danger btn-sm fa fa-trash" })
        </td>
    </tr>
    }
</table>
<div>
    @if (Request.IsAuthenticated && User.IsInRole("Admin") || User.IsInRole("Employee"))
    {
        @Html.ActionLink(" CSV", "ExportToCSV", null, new { @class = "btn btn-primary btn-lg right fa fa-download" })
        @Html.ActionLink(" EXCEL", "ExportToExcel", null, new { @class = "btn btn-success btn-lg right fa fa-download" })
    }
    Page @(Model.Members.PageCount < Model.Members.PageNumber ? 0 :
    Model.Members.PageNumber) of @Model.Members.PageCount
    @Html.PagedListPager(Model.Members, page => Url.Action("Index",
        new
            {
                Search = @Model.Search,
                    page
            }))
</div>
